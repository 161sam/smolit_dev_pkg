# smolit_dev_pkg (sd)

**sd** ist ein schlanker Dev-Orchestrator:  
👉 Startet **OpenHands** (Docker), verbindet **MCP (Sequential Thinking + Memory)** und bietet eine **Claude-Bridge** per HTTP.  
Dazu kommt eine **CLI** mit nützlichen Subcommands für Entwickler*innen und Microagent-Templates.  
Das Paket ist außerdem eng mit dem **VoiceAssistant (va)** Projekt integriert.

---

## 🚀 Quickstart

```bash
npm install -g .
sd deps doctor
sd up          # Startet OpenHands (Docker) + Bridge
sd status      # Health-Check (GUI, MCP, Bridge)
````

GUI: [http://127.0.0.1:3311](http://127.0.0.1:3311)
Bridge: [http://127.0.0.1:8815/healthz](http://127.0.0.1:8815/healthz)

---

## ⚙️ Installation & Setup

### 1. Environment

```bash
cp env.example ~/.config/smolit_dev/.env
```

oder mit:

```bash
sd keys init   # (optional, falls implementiert)
```

### 2. Docker

* OpenHands Container (`openhands/supergateway`) wird automatisch gestartet.
* Ports:

  * GUI: `3311`
  * MCP Sequential: `8811`
  * MCP Memory: `8812`
  * sd-Bridge: `8815`

### 3. Node.js

* Erfordert Node >= 18
* Installiert sich als globales CLI (`sd`).

---

## 🔄 Die sd-Pipeline

Die `sd`-Pipeline verbindet Eingaben, Analyse und KI-Tools:

1. **User Input (unstrukturiert)**
   *Der/die Entwickler*in oder ein Workflow liefert einen Text oder eine Datei.\*

2. **OpenHands (strukturierend)**

   * Läuft in Docker
   * Erkennt Intentionen und strukturiert unklare Eingaben
   * Baut daraus einen validierten Prompt

3. **Claude als Supervisor**

   * Empfängt den strukturierten Prompt von OpenHands
   * Agiert als „Supervisor“ und orchestriert die Arbeit
   * Entscheidet, welche Tools/Aktionen erforderlich sind

4. **Codex als Worker**

   * Claude beauftragt Codex (oder ein anderes Modell) mit konkreten Aufgaben
   * Codex führt Code-Analysen, Patch-Erstellung und Refactorings durch
   * Ergebnisse werden zurück in den Pipeline-Kontext gespielt

5. **Memory (MCP)**

   * Erkenntnisse und Ergebnisse werden ins MCP Memory geschrieben
   * Bleiben für spätere Iterationen abrufbar

Ergebnis: **Von unstrukturiertem Userinput → strukturierter Prompt → konkrete Patches & Next Steps.**

---

## 🖥️ CLI

```bash
sd up              # OpenHands + Bridge starten, GUI öffnen
sd start           # wie 'up', ohne GUI-Open
sd stop            # Container & Bridge stoppen
sd status          # Health-Check
sd logs            # zeigt Log-Verzeichnis
sd deps doctor     # prüft Dependencies
sd ports doctor    # Port-Kollisionen prüfen

sd project init    # .claude/settings.json für MCP erzeugen
sd mcp status      # MCP-Status prüfen

sd analyze         # Repo-Analyse starten
sd va index        # VoiceAssistant indexieren (Knowledge-Map)
sd va test         # Tests laufen lassen + Patches
sd va next         # nächste Schritte erzeugen
```

---

## 🔒 Sicherheit

* **Standardmäßig KEIN** `--dangerously-skip-permissions`.
* Optional via `SD_BYPASS_PERMISSIONS=1` aktivierbar.
* Bridge erlaubt nur Tools:

  ```bash
  SD_ALLOWED_TOOLS="sequential-thinking,memory-shared,memory,codex-bridge"
  ```

---

## 🧩 Integration

### Flowise

* Custom Tool Node: `sdBridge` (→ `http://127.0.0.1:8815/run?prompt=…`)
* Healthcheck Node für Bridge
* Buttons für `va index/test/next`

### n8n

* Webhook → Bridge Proxy (beliebige Prompts/Dateien)
* Cron-Healthcheck → Memory speichern
* GitHub Push → Repo-Analyse
* Buttons für VoiceAssistant (`/va/index`, `/va/test`, `/va/next`)

---

## 📂 Struktur

```
bin/sd              # CLI Entry
bin/bridge.mjs      # HTTP Bridge (Claude/MCP)
bin/postinstall.mjs # Idempotentes Setup
templates/          # Microagent-Templates
env.example         # Beispiel-Env
```

---

## 🧑‍💻 Developer Guide

* **Linting**:

  ```bash
  npm run lint:shell
  npm run lint:node
  ```
* **CI Smoke-Test**:

  ```bash
  npm run ci:smoke
  ```
* **Packaging-Test**:

  ```bash
  npm pack
  ```

---

## 📖 User Handbook

### Starten

```bash
sd up
```

Öffnet GUI + startet Bridge. Danach können Prompts via Flowise oder n8n durchgereicht werden.

### Typische Probleme

* **Port belegt** → `sd ports doctor`
* **Docker nicht läuft** → `systemctl start docker`
* **Bridge EPIPE** → wird automatisch mit Retry behandelt

### Logs

```bash
~/.local/state/smolit_dev/logs/
```

### Uninstall

```bash
npm uninstall -g .
rm -rf ~/.config/smolit_dev ~/.local/state/smolit_dev ~/.cache/smolit_dev
```

---

## 📜 License

MIT License

---

